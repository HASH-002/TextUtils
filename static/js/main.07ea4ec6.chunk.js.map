{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Textform","useState","text","setText","num","arr","split","length","numOfWords","style","color","heading","backgroundColor","value","onChange","e","target","rows","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newtext","join","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.07ea4ec6.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              \r\n              <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\nNavbar.defaultProps = {\r\n  title: 'Stranger'\r\n};","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Textform(props) {\r\n\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const num = numOfWords();\r\n    function numOfWords() {\r\n        let arr = text.split(/[ ]+/);\r\n        return (arr[arr.length - 1] === '' ? arr.length - 1 : arr.length);\r\n    }\r\n\r\n    const handleOnChange = (e) => { setText(e.target.value); }\r\n\r\n    function convertToUpper() {\r\n        setText(text.toUpperCase());\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n    function convertToLower() {\r\n        setText(text.toLowerCase());\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n    function handleCopy() {\r\n        // Showing selected text in blue\r\n        document.getElementById('myBox').select();\r\n        // Copying text to clipboard\r\n        navigator.clipboard.writeText(text)\r\n        props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n    }\r\n    function removeExtraSpaces() {\r\n        // Using regex removing one or more spaces and storing in array\r\n        var newtext = text.split(/[ ]+/);\r\n        // Joing array values with one space and resetting text\r\n        setText(newtext.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    }\r\n    function clearText() {\r\n        setText(\"\");\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : '#042743' }} id=\"myBox\" value={text} onChange={handleOnChange} rows=\"8\"></textarea>\r\n                    <button className=\"btn btn-primary my-3\" onClick={convertToUpper}>Convert to Uppercase</button>\r\n                    <button className=\"btn btn-primary my-3 mx-3\" onClick={convertToLower}>Convert to Lowercase</button>\r\n                    <button className=\"btn btn-primary my-3\" onClick={handleCopy}>Copy text</button>\r\n                    <button className=\"btn btn-primary my-3 mx-3\" onClick={removeExtraSpaces}>Remove Extra Spaces</button>\r\n                    <button className=\"btn btn-primary my-3\" onClick={clearText}>Clear text</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}>\r\n                <h1>Your text summary</h1>\r\n                <p>{num} words and {text.length} characters</p>\r\n                <p>{num * 0.008} Minutes Read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter something to preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nTextform.propTypes = {\r\n    heading: PropTypes.string.isRequired\r\n};","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\nexport default Alert","import './App.css';\r\nimport React, { useState } from 'react'\r\n// import About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport Textform from './components/Textform';\r\nimport Alert from './components/Alert';\r\n// import {\r\n//   BrowserRouter as Router, Switch, Route,\r\n// } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n\r\n  const [mode, setMode] = useState('light');\r\n  const [alert, setAlert] = useState(null);\r\n  function showAlert(msg, type) {\r\n    setAlert({\r\n      msg: msg,\r\n      type: type\r\n    })\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 1500);\r\n  }\r\n  const toggleMode = () => {\r\n    if (mode === 'light') {\r\n      setMode('dark')\r\n      document.body.style.backgroundColor = '#042743';\r\n      showAlert(\"Switched to Dark mode\", \"success\");\r\n    }\r\n    else {\r\n      setMode('light')\r\n      document.body.style.backgroundColor = 'white';\r\n      showAlert(\"Switched to Light mode\", \"success\");\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      {/* <Router> */}\r\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n        <Alert alert={alert} />\r\n        <div className=\"container my-3\">\r\n          {/* <Switch>\r\n            <Route exact path=\"/about\">\r\n              <About />\r\n            </Route>\r\n            <Route exact path=\"/\"> */}\r\n              <Textform heading=\"Enter the Text to analyze\" mode={mode} showAlert={showAlert} />\r\n            {/* </Route>\r\n          </Switch> */}\r\n        </div>\r\n      {/* </Router> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}